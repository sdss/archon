---
# A dictionary of controller name to Archon controller connection parameters.
controllers:
  # sp1:
  #   host: 10.7.45.26
  #   port: 4242
  #   parameters:
  #     pixels: 2040
  #     lines: 2040
  #     overscan_pixels: 20
  #     taps_per_detector: 4
  #     framemode: split
  #   detectors:
  #     r1:
  #       serial: STA29857
  #       gain: [2.75, 2.79, 2.68, 2.74]
  #       readnoise: [3.2, 3.3, 3.0, 3.1]
  #       type: STA4850
  #     b1:
  #       serial: STA29925
  #       gain: [2.71, 2.71, 2.68, 2.69]
  #       readnoise: [3.0, 3.0, 2.8, 2.8]
  #       type: STA4850
  #     z1:
  #       serial: STA27977
  #       gain: [2.76, 2.65, 2.89, 2.78]
  #       readnoise: [3.6, 3.6, 3.4, 3.6]
  #       type: STA4850
  sp2:
    host: 10.7.45.25
    port: 4242
    parameters:
      pixels: 2040
      lines: 2040
      overscan_pixels: 20
      taps_per_detector: 4
      framemode: split
    detectors:
      r2:
        serial: STA29857
        gain: [2.63, 2.64, 2.65, 2.71]
        readnoise: [3.2, 3.3, 3.0, 3.1]
        type: STA4850
      b2:
        serial: STA29925
        gain: [2.45, 2.46, 2.46, 2.50]
        readnoise: [3.0, 3.0, 2.8, 2.8]
        type: STA4850
      z2:
        serial: STA27977
        gain: [2.60, 2.65, 2.57, 2.72]
        readnoise: [3.6, 3.6, 3.4, 3.6]
        type: STA4850

# Header for each CCD. The key is the header keyword name. The value can
# be a single string, a tuple with the value and comment, or a dictionary for
# cases in which the value is retrieved from an archon command or when the
# value depends on the CCD name.
header:
  CCDTEMP1:
    command: status
    detectors:
      r1: ['mod2/tempa', 'Temperature of the sensor (HEATERX 2)', 2]
      b1: ['mod12/tempc', 'Temperature of the sensor (HEATERX 12)', 2]
      z1: ['mod12/tempa', 'Temperature of the sensor (HEATERX 12)', 2]
      r2: ['mod2/tempa', 'Temperature of the sensor (HEATERX 2)', 2]
      b2: ['mod12/tempc', 'Temperature of the sensor (HEATERX 12)', 2]
      z2: ['mod12/tempa', 'Temperature of the sensor (HEATERX 12)', 2]
  CCDTEMP2:
    command: status
    detectors:
      r1: ['mod2/tempb', 'LN2 temperature (HEATERX 2)', 2]
      b1: ['mod2/tempc', 'LN2 temperature (HEATERX 2)', 2]
      z1: ['mod12/tempb', 'LN2 temperature (HEATERX 12)', 2]
      r2: ['mod2/tempb', 'Temperature of the sensor (HEATERX 2)', 2]
      b2: ['mod2/tempc', 'Temperature of the sensor (HEATERX 12)', 2]
      z2: ['mod12/tempb', 'Temperature of the sensor (HEATERX 12)', 2]
  DATASEC: ['[1:4120,1:4080]', 'Section of the detector containing data']
  CCDSEC: ['[1:4120,1:4080]', 'Section of the detector read out']
  BIASSEC: ['[2041:2080,1:4080]', 'Section of calibration/bias data']
  TRIMSEC: ['[1:2040,1:4080],[2081:4120,1:4080]', 'Section with useful data']

devices:
  motor_controllers:
    # sp1:
    #   shutter:
    #     host: 10.7.45.28
    #     port: 7776
    #   hartmann_left:
    #     host: 10.7.45.28
    #     port: 7777
    #   hartmann_right:
    #     host: 10.7.45.28
    #     port: 7778
    sp2:
      shutter:
        host: 10.7.45.27
        port: 7776
      hartmann_left:
        host: 10.7.45.27
        port: 7777
      hartmann_right:
        host: 10.7.45.27
        port: 7778
  lamps:
    MI150:
      host: 10.7.45.22
      outlet: 4
    TS:
      host: 10.7.45.29
      outlet: 7
    Argon:
      host: 10.7.45.31
      outlet: 1
    Xenon:
      host: 10.7.45.31
      outlet: 2
    HgAr:
      host: 10.7.45.31
      outlet: 3
    LDLS:
      host: 10.7.45.31
      outlet: 4
    Krypton:
      host: 10.7.45.31
      outlet: 5
    Neon:
      host: 10.7.45.31
      outlet: 6
    HgNe:
      host: 10.7.45.31
      outlet: 7
  pressure:
    # r1:
    #   host: 10.7.45.30
    #   port: 1112
    #   id: 253
    # b1:
    #   host: 10.7.45.30
    #   port: 1114
    #   id: 253
    # z1:
    #   host: 10.7.45.30
    #   port: 1115
    #   id: 253
    b2:
      host: 10.7.45.33
      port: 1114
      id: 253
    z2:
      host: 10.7.45.33
      port: 1115
      id: 253
    r2:
      host: 10.7.45.33
      port: 1112
      id: 253
  depth:
    host: 10.7.45.30
    port: 1116
    channel: null
  wago:
    controllers:
      # sp1:
      #   address: 10.7.45.28
      #   port: 502
      sp2:
        address: 10.7.45.27
        port: 502
    modules:
      ANALOG1:
        model: 750-497
        mode: input_register
        channels: 8
        description: E+E temperature and humidity sensors
        devices:
          RH1:
            address: 0
            category: humidity
            adaptor: rh_dwyer
            units: percent
          T1:
            address: 1
            category: temperature
            adaptor: t_dwyer
            units: degC
          RH2:
            address: 2
            category: humidity
            adaptor: rh_dwyer
            units: percent
          T2:
            address: 3
            category: temperature
            adaptor: t_dwyer
            units: degC
          RH3:
            address: 4
            category: humidity
            adaptor: rh_dwyer
            units: percent
          T3:
            address: 5
            category: temperature
            adaptor: t_dwyer
            units: degC
      ANALOG2:
        model: 750-450
        mode: input_register
        channels: 4
        description: Pt RTD sensors
        devices:
          RTD1:
            address: 8
            category: temperature
            adaptor: rtd
            units: degC
            description: Inside the controller box
          RTD2:
            address: 9
            category: temperature
            adaptor: rtd
            units: degC
            description:
          RTD3:
            address: 10
            category: temperature
            adaptor: rtd
            units: degC
            description:
          RTD4:
            address: 11
            category: temperature
            adaptor: rtd
            units: degC
            description:
      DO:
        model: 750-530
        mode: coil
        channels: 8
        description: Power relays
        devices:
          shutter:
            address: 512
            type: relay
            category: relays
            relay_type: NC
          hartmann_left:
            address: 514
            type: relay
            category: relays
            relay_type: NO
          hartmann_right:
            address: 515
            type: relay
            category: relays
            relay_type: NO

# This is the ACF configuration file to be loaded to the Archon including the
# timing script. {archon_etc} gets completed with the path of the etc directory once
# installed. If the path is not absolute, the root of the package is used as working
# directory.
archon:
  config_file:
    sp1: lvm/config/archon/LVM_100kHz_sp1.acf
    sp2: lvm/config/archon/LVM_100kHz_sp2.acf

# Write a log for each exposure (requires files.lab_log to be set).
write_log: true

# The base directory where the data will be saved (and MJD subdirectory is always added)
# and the format of the saved filename. Available placeholders are {observatory} which
# is replaced with "apo" or "lco", {hemisphere} replaced with "n" if the observatory is
# "apo" and "s" if "lco", {controller} which is replaced with the name of the Archon
# controller defined above, {ccd} which is the name do the CCD (including the controller
# identifier), and {exposure} which is a never-repeating sequence identifier. "split"
# controls whether the CCD frames from each controller are saved as individual files
# or as different HDU extensions inside the FITS file.
files:
  data_dir: '/data/spectro/lvm'
  split: true
  template: 'sdR-{hemisphere}-{ccd}-{exposure_no:08d}.fits.gz'

exposure_list:
  id: 103BNxjlZ59Sob3jDO4EN1z6zp2q5YrYA6nTjGlZM6XY
  sheet: Sheet2

# Sensor configuration. Mainly for lab testing.
sensors:
  H5179:
    host: 10.7.45.30
    port: 1111

# Actor congiguration for the LVMActor class
actor:
  name: archon
  host: localhost
  port: 5672
